// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatShopB2C.EF.Data;

#nullable disable

namespace NatShopB2C.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231124115913_addedTablestoDb")]
    partial class addedTablestoDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ActivityType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLabelName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AddressPersonName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Addresses");

                    b.HasIndex(new[] { "StateId" }, "IX_Addresses_1");

                    b.HasIndex(new[] { "CountryId" }, "IX_Addresses_2");

                    b.HasIndex(new[] { "StateId", "CityId", "CountryId" }, "IX_Addresses_3");

                    b.HasIndex(new[] { "AddressTypeId" }, "IX_Addresses_4");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.AdminMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint");

                    b.Property<int?>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("PageID");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int")
                        .HasColumnName("ParentMenuID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PageId" }, "IX_AdminMenus");

                    b.HasIndex(new[] { "ParentMenuId" }, "IX_AdminMenus_1");

                    b.HasIndex(new[] { "Id" }, "IX_AdminMenus_2");

                    b.ToTable("AdminMenus");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Advertiesment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("Advertiesments");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(235)
                        .HasColumnType("nvarchar(235)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ApplicationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Art", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArtCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ArtCategoryID");

                    b.Property<string>("ArtName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByCaption")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ArtCategoryId");

                    b.ToTable("Arts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArtCategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentArtCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentArtCategoryID");

                    b.HasKey("Id");

                    b.HasIndex("ParentArtCategoryId");

                    b.ToTable("ArtCategories");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int>("ArtId")
                        .HasColumnType("int")
                        .HasColumnName("ArtID");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("OriginalPositionX")
                        .HasColumnType("smallint");

                    b.Property<short?>("OriginalPositionY")
                        .HasColumnType("smallint");

                    b.Property<short?>("PositionX")
                        .HasColumnType("smallint");

                    b.Property<short?>("PositionY")
                        .HasColumnType("smallint");

                    b.Property<short?>("Rotation")
                        .HasColumnType("smallint");

                    b.Property<string>("RotationPoint")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeOfImage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ArtId");

                    b.ToTable("ArtProperties");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.BrandImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ImageId");

                    b.ToTable("BrandImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CanvasType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<string>("CanvasTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportX")
                        .HasColumnType("int");

                    b.Property<int?>("ExportY")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PositionX")
                        .HasColumnType("int");

                    b.Property<string>("PositionY")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CanvasTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWishList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<Guid?>("ProductDiscountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "PriceId" }, "IX_Carts");

                    b.HasIndex(new[] { "ProductDiscountId" }, "IX_Carts_1");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_Carts_2");

                    b.HasIndex(new[] { "UserId" }, "IX_Carts_3");

                    b.HasIndex(new[] { "Id" }, "IX_Carts_4");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLeaf")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubscribable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("FilterId")
                        .HasColumnType("int")
                        .HasColumnName("FilterID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short?>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategoryFilters");

                    b.HasIndex(new[] { "FilterId" }, "IX_CategoryFilters_1");

                    b.HasIndex(new[] { "FilterId", "CategoryId" }, "IX_CategoryFilters_2");

                    b.ToTable("CategoryFilters");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<int?>("ImageOrderNo")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefaultImage")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "ImageId" }, "IX_CategoryImages");

                    b.ToTable("CategoryImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategorySpecificationGroupsSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("FilterRank")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsFilter")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SpecificationGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationGroupID");

                    b.Property<int?>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SpecificationGroupId" }, "IX_CategorySpecificationGroupsSpecifications");

                    b.HasIndex(new[] { "SpecificationId" }, "IX_CategorySpecificationGroupsSpecifications_1");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategorySpecificationGroupsSpecifications_2");

                    b.HasIndex(new[] { "SpecificationId", "CategoryId", "SpecificationGroupId" }, "IX_CategorySpecificationGroupsSpecifications_3");

                    b.ToTable("CategorySpecificationGroupsSpecifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryUsageType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("UsageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsageTypeID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UsageTypeId");

                    b.ToTable("CategoryUsageTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("MetroCity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MetrocityId")
                        .HasColumnType("int")
                        .HasColumnName("MetrocityID");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_Cities");

                    b.HasIndex(new[] { "MetrocityId" }, "IX_Cities_1");

                    b.HasIndex(new[] { "StateId" }, "IX_Cities_2");

                    b.HasIndex(new[] { "MetrocityId", "CountryId", "StateId" }, "IX_Cities_3");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Cmspage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetaTitles")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("CMSPages", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CmspageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CmspageId")
                        .HasColumnType("int")
                        .HasColumnName("CMSPageID");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PageHeading")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CmspageId");

                    b.HasIndex("ContentId");

                    b.ToTable("CMSPageContents", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ContactType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    b.Property<string>("ContactTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Align")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DisplaySize")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImageId" }, "IX_Contents");

                    b.HasIndex(new[] { "Id" }, "IX_Contents_1");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Area")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Isocode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("ISOCode")
                        .IsFixedLength();

                    b.Property<string>("Isocode3")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("ISOCode3")
                        .IsFixedLength();

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AsOnDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Culture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsBaseCurrency")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefaultCurrency")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(15,5)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Browser")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("IpAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DayWiseSale", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Orders")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.ToTable("DayWiseSales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("CommissionPercent")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal?>("CommitionFlat")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignProductName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("DesignRate")
                        .HasColumnType("decimal(15,3)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCommitionApplicable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<string>("PublishImagePath")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid?>("PublishProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublishProductVariationID");

                    b.Property<string>("Size")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("TotalWorkArea")
                        .HasColumnType("decimal(15,3)");

                    b.HasKey("Id");

                    b.ToTable("DesignProducts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<byte?>("CanvasTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("CanvasTypeID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DesignProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("DesignProductID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OriginalImageID");

                    b.Property<decimal?>("WorkArea")
                        .HasColumnType("decimal(15,3)");

                    b.HasKey("Id");

                    b.HasIndex("CanvasTypeId");

                    b.HasIndex("DesignProductId");

                    b.ToTable("DesignProductImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductImageRecepy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("ArtPropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtPropertyID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("DesignProductImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("DesignProductImageID");

                    b.Property<short?>("DisplayPriority")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TextPropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextPropertyID");

                    b.HasKey("Id");

                    b.HasIndex("ArtPropertyId");

                    b.HasIndex("DesignProductImageId");

                    b.HasIndex("TextPropertyId");

                    b.ToTable("DesignProductImageRecepies");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DesignProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("DesignProductID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGroupOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TextPropertyId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextPropertyID1");

                    b.Property<Guid?>("TextPropertyId2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextPropertyID2");

                    b.Property<Guid?>("TextPropertyId3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextPropertyID3");

                    b.Property<Guid?>("TextPropertyId4")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextPropertyID4");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DesignProductId");

                    b.HasIndex("TextPropertyId1");

                    b.HasIndex("TextPropertyId2");

                    b.HasIndex("TextPropertyId3");

                    b.HasIndex("TextPropertyId4");

                    b.ToTable("DesignProductOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DiscountName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Discription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImageId" }, "IX_Discounts");

                    b.HasIndex(new[] { "StartDate", "EndDate" }, "IX_Discounts_1");

                    b.HasIndex(new[] { "StartDate" }, "IX_Discounts_2");

                    b.HasIndex(new[] { "EndDate" }, "IX_Discounts_3");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountOptioin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("BreakPointCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(15,3)");

                    b.Property<byte?>("DiscountValueTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DiscountValueTypeID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxBreakPoin")
                        .HasColumnType("int");

                    b.Property<int?>("MinBreakPoint")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte?>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiscountId" }, "IX_DiscountOptioins");

                    b.HasIndex(new[] { "DiscountValueTypeId" }, "IX_DiscountOptioins_1");

                    b.HasIndex(new[] { "Id" }, "IX_DiscountOptioins_2");

                    b.ToTable("DiscountOptioins");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DiscountTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountValueType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DiscountValueTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("DiscountValueTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActionId")
                        .HasColumnType("int")
                        .HasColumnName("ActionID");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("FeedbackCategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("FeedbackCategoryID");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnread")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte?>("UserRating")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ActionBy");

                    b.HasIndex("ActionId");

                    b.HasIndex("FeedbackCategoryId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FeedbackAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("FeedbackActions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FeedbackInquiryCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsFeedback")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInquiry")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackInquiryCategories");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ControlType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilterName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FlagGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FlagGroupName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentFlagGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParentFlagGroupID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentFlagGroupId" }, "IX_FlagGroups");

                    b.ToTable("FlagGroups");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FooterSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FooterSectionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("FooterSections");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FooterSectionLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FooterSectionId")
                        .HasColumnType("int")
                        .HasColumnName("FooterSectionID");

                    b.Property<string>("FooterSectionLinkCaption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FooterSectionId" }, "IX_FooterSectionLinks");

                    b.ToTable("FooterSectionLinks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.HelpfulProductReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductReviewID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("HelpfulProductReviews");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Alt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Inquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("InquiryCategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("InquiryCategoryID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ResponderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InquiryCategoryId");

                    b.HasIndex("ResponderUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.InquiryMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<Guid?>("InquiryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InquiryID");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsReplay")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("InquiryId");

                    b.ToTable("InquiryMessages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Keyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Mail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHtml")
                        .HasColumnType("bit")
                        .HasColumnName("IsHTML");

                    b.Property<string>("MailName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DocumentID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MailID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MailId");

                    b.ToTable("MailAttachments");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MailID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MailId");

                    b.ToTable("MailQueues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MailID");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("MailId");

                    b.ToTable("MailResources");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Membership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowsStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId")
                        .HasName("PK__Membersh__1788CC4C31FFB006");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("MenuName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short?>("Order")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int")
                        .HasColumnName("ParentMenuID");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MetroCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MetroCity1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("MetroCity");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NoOfCity")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_MetroCities");

                    b.HasIndex(new[] { "StateId" }, "IX_MetroCities_1");

                    b.ToTable("MetroCities");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.NatShopB2CAPI.Models.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<short>("ContactTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("ContactTypeID");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagePath2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("NotificationTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("NotificationTypeID");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("RedirectURL");

                    b.Property<string>("RefId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RefID");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.NotificationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("RedirectURL");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.OauthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ApplicationID");

                    b.Property<string>("CallbackUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CallbackURL");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LoginUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LoginURL");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderIcon")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TokenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TokenURL");

                    b.Property<string>("UserInfoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("UserInfoURL");

                    b.HasKey("Id");

                    b.ToTable("OAuthProviders", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.OrderStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OrderStatus");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AliasName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRequiredPermission")
                        .HasColumnType("bit");

                    b.Property<string>("PageRelativeName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Pages");

                    b.HasIndex(new[] { "PageRelativeName" }, "IX_Pages_1");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethodName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("PaymentMethodTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("PaymentMethodTypeID");

                    b.Property<int?>("PaymentPluginId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentPluginID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PaymentPluginId" }, "IX_PaymentMethods");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "IX_PaymentMethods_1");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentMethodType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentGatewayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentPlugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConfigurationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentPluginName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PluginWebLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("PaymentPlugins");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PersonAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("Address1Id")
                        .HasColumnType("int")
                        .HasColumnName("Address1ID");

                    b.Property<int?>("Address2Id")
                        .HasColumnType("int")
                        .HasColumnName("Address2ID");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("BankAccountID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyRegistrationNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("DebitLimit")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("EntityType")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FAX");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pan")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PAN");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceTaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tinnumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TINNumber");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Address1Id");

                    b.HasIndex("Address2Id");

                    b.HasIndex(new[] { "UserId" }, "IX_PersonAccounts");

                    b.ToTable("PersonAccounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price1")
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<short>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UnitId" }, "IX_Prices");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsCod")
                        .HasColumnType("bit")
                        .HasColumnName("IsCOD");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsEmi")
                        .HasColumnType("bit")
                        .HasColumnName("IsEMI");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubscribable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsTaxable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LaunchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LinkURL");

                    b.Property<int?>("ManufactureId")
                        .HasColumnType("int")
                        .HasColumnName("ManufactureID");

                    b.Property<int?>("MaxOrderQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MinOrderQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("ProductSetId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProductSetID");

                    b.Property<short?>("ProductTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProductTypeID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(5,3)");

                    b.Property<short?>("Skuid")
                        .HasColumnType("smallint")
                        .HasColumnName("SKUID");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<short?>("StockTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("StockTypeID");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.Property<int?>("UsageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsageTypeID");

                    b.HasKey("Id");

                    b.HasIndex("ProductSetId");

                    b.HasIndex("Skuid");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "BrandId", "CategoryId" }, "IX_Products");

                    b.HasIndex(new[] { "BrandId" }, "IX_Products_1");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Products_2");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_Products_3");

                    b.HasIndex(new[] { "UsageTypeId" }, "IX_Products_4");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductAssociatonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductAssociations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductAssociationProductVariation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ProductAssociationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductAssociationID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductAssociationId" }, "IX_ProductAssociationProductVariations");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_ProductAssociationProductVariations_1");

                    b.ToTable("ProductAssociationProductVariations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<Guid?>("DiscountOptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DiscountOptionID");

                    b.Property<byte?>("DiscountTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DiscountTypeID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountOptionId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "BrandId" }, "IX_ProductDiscounts");

                    b.HasIndex(new[] { "DiscountId" }, "IX_ProductDiscounts_1");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductDiscounts_2");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_ProductDiscounts_3");

                    b.HasIndex(new[] { "ProductVariationId", "DiscountId", "ProductId" }, "IX_ProductDiscounts_4");

                    b.HasIndex(new[] { "DiscountTypeId" }, "IX_ProductDiscounts_5");

                    b.HasIndex(new[] { "Id" }, "IX_ProductDiscounts_6");

                    b.ToTable("ProductDiscounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductPopulationFactor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductPopulationFactorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ProductPopulationFactors");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsEvaluate")
                        .HasColumnType("bit");

                    b.Property<int?>("IsHelpfulCount")
                        .HasColumnType("int");

                    b.Property<int?>("IsNotHelpfulCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVarified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReviewDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewTitle")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("VarifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VarifiedBy");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductReviews");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_ProductReviews_1");

                    b.HasIndex(new[] { "UserId" }, "IX_ProductReviews_2");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductSetName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductSets");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSetProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<long?>("ProductSetId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProductSetID");

                    b.HasKey("Id");

                    b.HasIndex("ProductSetId");

                    b.HasIndex(new[] { "ProductId", "ProductSetId" }, "IX_ProductSetProducts");

                    b.ToTable("ProductSetProducts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductShipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Dimension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsFreeShipment")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductVariatioinPriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariatioinPriceID");

                    b.Property<decimal?>("ShipmentCharges")
                        .HasColumnType("decimal(15,3)");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(15,3)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariatioinPriceId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductShipments");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("SpecificationGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationGroupID");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductSpecifications_1");

                    b.HasIndex(new[] { "SpecificationGroupId" }, "IX_ProductSpecifications_2");

                    b.HasIndex(new[] { "SpecificationId" }, "IX_ProductSpecifications_3");

                    b.ToTable("ProductSpecifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductStatitic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaidPramotion")
                        .HasColumnType("int");

                    b.Property<int?>("ViewerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductStatitics");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductStock", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<short?>("TransactionTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TransactionTypeID");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_ProductStocks");

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int")
                        .HasColumnName("TaxID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTaxs");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsAllowPurchase")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAllowSale")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsShowInCatalog")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDefaultProductVariation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsVariation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductAssociationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductAssociationID");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductVariationList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(15,3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductVariations");

                    b.HasIndex(new[] { "ProductAssociationId" }, "IX_ProductVariations_1");

                    b.ToTable("ProductVariations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<int?>("ImageOrderNo")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex(new[] { "ImageId" }, "IX_ProductVariationImages");

                    b.HasIndex(new[] { "ImageId" }, "IX_ProductVariationImages_1");

                    b.HasIndex(new[] { "ImageId", "ProductVariationId" }, "IX_ProductVariationImages_2");

                    b.HasIndex(new[] { "ImageId", "ImageOrderNo", "ProductVariationId" }, "IX_ProductVariationImages_3");

                    b.ToTable("ProductVariationImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Barcode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool?>("IsBasePrice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefaultPrice")
                        .HasColumnType("bit");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Barcode" }, "IX_ProductVariationPrices");

                    b.HasIndex(new[] { "PriceId" }, "IX_ProductVariationPrices_1");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_ProductVariationPrices_2");

                    b.HasIndex(new[] { "PriceId", "ProductVariationId" }, "IX_ProductVariationPrices_3");

                    b.ToTable("ProductVariationPrices");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariationId")
                        .HasColumnType("int")
                        .HasColumnName("VariationID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId", "VariationId" }, "IX_ProductVariationValues");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductVariationValues_1");

                    b.HasIndex(new[] { "VariationId" }, "IX_ProductVariationValues_2");

                    b.ToTable("ProductVariationValues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Profile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PropertyNames")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte[]>("PropertyValueBinary")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("PropertyValueStrings")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("UserId")
                        .HasName("PK__Profiles__1788CC4C300B4ED8");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProofType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProofTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProofTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Purchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal?>("CurrencyValue")
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExternalBillNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGeneralPurchase")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("NetPayable")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("OtherAdditions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("OtherDeductions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("PersonAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonAccountID");

                    b.Property<string>("PurchaseBillNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("PurchaseOrderNo")
                        .HasColumnType("int");

                    b.Property<short?>("PurchaseStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("PurchaseStatusID");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalShipmentCharges")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PersonAccountId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PurchaseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<Guid?>("ProductDiscountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<long?>("PurchaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("PurchaseID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(15,3)");

                    b.Property<short?>("SrNo")
                        .HasColumnType("smallint");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal?>("CurrencyValue")
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGeneralPurchase")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PersonAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonAccountID");

                    b.Property<Guid?>("PurchaseOrderApproveBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short?>("PurchaseOrderStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("PurchaseOrderStatusID");

                    b.Property<Guid?>("PurchaseOrderedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PurchaseOrderedBY");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(15,3)");

                    b.Property<byte?>("SrNo")
                        .HasColumnType("tinyint");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.RolePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("PageID");

                    b.Property<string>("Permission")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PageId", "RoleId" }, "IX_RolePages");

                    b.ToTable("RolePages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillingAddressID");

                    b.Property<string>("BillingAddressJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BillingAddressJSON");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyFormat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal?>("CurrencyValue")
                        .HasColumnType("decimal(5,3)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDispatched")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaymentMade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("NetPayable")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("OtherAdditions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("OtherDeductions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<short?>("PaymentMethodId")
                        .HasColumnType("smallint")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime?>("PaymentReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PersonAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonAccountID");

                    b.Property<string>("ResBankRefNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_Bank_Ref_No");

                    b.Property<string>("ResCardName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_Card_Name");

                    b.Property<string>("ResCoRelationId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_CoRelationID");

                    b.Property<string>("ResCurrecnyCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Res_CurrecnyCode");

                    b.Property<decimal?>("ResDiscountValue")
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("Res_Discount_Value");

                    b.Property<bool?>("ResIsTransactionSuccessFul")
                        .HasColumnType("bit")
                        .HasColumnName("Res_IsTransactionSuccessFul");

                    b.Property<string>("ResJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Res_JSON");

                    b.Property<string>("ResMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Res_Message");

                    b.Property<decimal?>("ResNetReceivedAmount")
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("Res_NetReceivedAmount");

                    b.Property<string>("ResOfferCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_Offer_Code");

                    b.Property<string>("ResOfferType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_Offer_Type");

                    b.Property<string>("ResPaymentTransactionNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Res_PaymentTransactionNo");

                    b.Property<DateTime?>("ResTimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("Res_TimeStamp");

                    b.Property<string>("ResVault")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Res_Vault")
                        .IsFixedLength();

                    b.Property<string>("SaleBillNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("SalesOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesOrderID");

                    b.Property<short?>("SalesStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("SalesStatusID");

                    b.Property<short?>("SalesTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("SalesTypeID");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAddressID");

                    b.Property<string>("ShippingAddressJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShippingAddressJSON");

                    b.Property<int?>("ShippingAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAgentID");

                    b.Property<string>("ShippingAgentTokenId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ShippingAgentTokenID");

                    b.Property<long?>("ShippingId")
                        .HasColumnType("bigint")
                        .HasColumnName("ShippingID");

                    b.Property<string>("ShippingTrackingUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShippingTrackingURL");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalQuantity")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalShipmentCharge")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalTax")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SalesTypeId");

                    b.HasIndex(new[] { "PaymentMethodId" }, "IX_Sales");

                    b.HasIndex(new[] { "PersonAccountId" }, "IX_Sales_1");

                    b.HasIndex(new[] { "SalesOrderId" }, "IX_Sales_2");

                    b.HasIndex(new[] { "ShippingAddressId" }, "IX_Sales_3");

                    b.HasIndex(new[] { "BillingAddressId" }, "IX_Sales_4");

                    b.HasIndex(new[] { "SalesStatusId" }, "IX_Sales_5");

                    b.HasIndex(new[] { "Id" }, "IX_Sales_6");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductDetailJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductDetailJSON");

                    b.Property<Guid?>("ProductDiscountId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID1");

                    b.Property<Guid?>("ProductDiscountId2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID2");

                    b.Property<Guid?>("ProductDiscountId3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID3");

                    b.Property<string>("ProductName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("ProductTaxId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProductTaxID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(15,3)");

                    b.Property<long?>("SalesId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesID");

                    b.Property<byte?>("SrNo")
                        .HasColumnType("tinyint");

                    b.Property<long?>("TaxId")
                        .HasColumnType("bigint")
                        .HasColumnName("TaxID");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PriceId" }, "IX_SalesDetails");

                    b.HasIndex(new[] { "ProductVariationId" }, "IX_SalesDetails_1");

                    b.HasIndex(new[] { "SalesId" }, "IX_SalesDetails_2");

                    b.HasIndex(new[] { "ProductDiscountId1" }, "IX_SalesDetails_3");

                    b.ToTable("SalesDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesHistoryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomerNotify")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("SalesId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesID");

                    b.Property<short?>("SalesStausId")
                        .HasColumnType("smallint")
                        .HasColumnName("SalesStausID");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SalesStausId");

                    b.ToTable("SalesHistoryTransactions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillingAddressID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal?>("CurrencyValue")
                        .HasColumnType("decimal(5,3)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDelliver")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDispatched")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaymentMade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("NetPayable")
                        .HasColumnType("decimal(15,3)");

                    b.Property<byte?>("OrderStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("OrderStatusID");

                    b.Property<decimal?>("OtherAdditions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("OtherDeductions")
                        .HasColumnType("decimal(15,3)");

                    b.Property<short?>("PaymentMethodId")
                        .HasColumnType("smallint")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime?>("PaymentReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PersonAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonAccountID");

                    b.Property<long?>("SaleBillNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Series")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAddressID");

                    b.Property<int?>("ShippingAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAgentID");

                    b.Property<string>("ShippingAgentTokenId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ShippingAgentTokenID");

                    b.Property<long?>("ShippingId")
                        .HasColumnType("bigint")
                        .HasColumnName("ShippingID");

                    b.Property<DateTime?>("ShippmentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalShipmentCharge")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PersonAccountId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<Guid?>("ProductDiscountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductDiscountID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductVariationID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("SalesOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesOrderID");

                    b.Property<byte?>("SrNo")
                        .HasColumnType("tinyint");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SaleStatusName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SalesStatus", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SalesTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SalesTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Seocontent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetaTitles")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Id" }, "IX_SEOContents_1")
                        .IsUnique();

                    b.ToTable("SEOContents", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PersonContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Priority")
                        .HasColumnType("smallint");

                    b.Property<short?>("ShipAgentTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("ShipAgentTypeID");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TrackingURL");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShipAgentTypeId");

                    b.HasIndex(new[] { "Id" }, "IX_ShipmentAgents");

                    b.ToTable("ShipmentAgents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentCourierServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourierServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("CourierServiceProviderID");

                    b.Property<DateTime?>("CreatedDat")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipmentAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentAgentID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentAgentId" }, "IX_ShipmentAgentCourierServiceProviders");

                    b.HasIndex(new[] { "CourierServiceProviderId" }, "IX_ShipmentAgentCourierServiceProviders_1");

                    b.ToTable("ShipmentAgentCourierServiceProviders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MaxDeliveryDay")
                        .HasColumnType("int");

                    b.Property<int?>("MinDeliveryDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ShipmentAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentAgentID");

                    b.Property<decimal?>("ShippingCharges")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentAgentId" }, "IX_ShipmentAgentRegions");

                    b.HasIndex(new[] { "StateId" }, "IX_ShipmentAgentRegions_1");

                    b.HasIndex(new[] { "CountryId" }, "IX_ShipmentAgentRegions_2");

                    b.HasIndex(new[] { "CityId" }, "IX_ShipmentAgentRegions_3");

                    b.ToTable("ShipmentAgentRegions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentRegionRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ExtraPackingWeight")
                        .HasColumnType("decimal(15,3)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("MinWeight")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid?>("ShipmentAgentRegionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShipmentAgentRegionID");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentAgentRegionId" }, "IX_ShipmentAgentRegionRates");

                    b.HasIndex(new[] { "UnitId" }, "IX_ShipmentAgentRegionRates_1");

                    b.HasIndex(new[] { "MaxWeight", "MinWeight", "UnitId" }, "IX_ShipmentAgentRegionRates_2");

                    b.ToTable("ShipmentAgentRegionRates");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("AgentTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("ShipmentAgentTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MetrocityId")
                        .HasColumnType("int")
                        .HasColumnName("MetrocityID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex(new[] { "MetrocityId", "CountryId", "StateId", "CityId" }, "IX_ShipmentOffers");

                    b.HasIndex(new[] { "StartDate" }, "IX_ShipmentOffers_1");

                    b.HasIndex(new[] { "EndDate" }, "IX_ShipmentOffers_2");

                    b.ToTable("ShipmentOffers");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentOfferCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixShipmentAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("FixShipmentDiscountAmount")
                        .HasColumnType("decimal(15,3)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxOrderPrice")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("MaxOrderWeight")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("MinOrderPrice")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("MinOrderWeight")
                        .HasColumnType("decimal(15,3)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ShipmentDiscountPercent")
                        .HasColumnType("decimal(15,3)");

                    b.Property<Guid>("ShipmentOfferId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShipmentOfferID");

                    b.Property<short?>("UnitId")
                        .HasColumnType("smallint")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ShipmentOfferId" }, "IX_ShipmentOfferConditions");

                    b.ToTable("ShipmentOfferConditions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Sm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Smsname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SMSName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("SMS", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Smsqueue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Smsid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SMSID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Smsid");

                    b.HasIndex("UserId");

                    b.ToTable("SMSQueues", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Smstopic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Smsid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SMSID");

                    b.Property<int>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("TopicID");

                    b.HasKey("Id");

                    b.HasIndex("Smsid");

                    b.HasIndex("TopicId");

                    b.ToTable("SMSTopics", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SpecificationName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SpecificationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SpecificationGroupName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SpecificationGroups");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SpecificatonGroupSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SpecificationGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationGroupID");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.HasIndex(new[] { "SpecificationGroupId", "SpecificationId" }, "IX_SpecificatonGroupSpecifications");

                    b.ToTable("SpecificatonGroupSpecifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StateCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_States");

                    b.ToTable("States");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.StockType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StockTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StockTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SystemFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("AutoRender")
                        .HasColumnType("bit");

                    b.Property<string>("Caption")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FlagGroupId")
                        .HasColumnType("int")
                        .HasColumnName("FlagGroupID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SystemFlagName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ToolTip")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ValueTypeID");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex(new[] { "FlagGroupId" }, "IX_SystemFlags");

                    b.HasIndex(new[] { "SystemFlagName" }, "IX_SystemFlags_1");

                    b.ToTable("SystemFlags");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(15,3)");

                    b.HasKey("Id");

                    b.ToTable("Taxs");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TextProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FontAlign")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FontName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("FontSize")
                        .HasColumnType("smallint");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("OriginalPositionX")
                        .HasColumnType("smallint");

                    b.Property<short?>("OriginalPositionY")
                        .HasColumnType("smallint");

                    b.Property<short?>("PositionX")
                        .HasColumnType("smallint");

                    b.Property<short?>("PositionY")
                        .HasColumnType("smallint");

                    b.Property<short?>("Rotation")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeOfText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short?>("Weight")
                        .HasColumnType("smallint");

                    b.Property<string>("WordArtName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TextProperties");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentTopicId")
                        .HasColumnType("int")
                        .HasColumnName("ParentTopicID");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TopicMail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MailID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("TopicID");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicMails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TransactionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Unit", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UsageTypeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UsageTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserDetail", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProfilePicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProofNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProofTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProofTypeID");

                    b.Property<short?>("UserTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId");

                    b.HasIndex("ProofTypeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("AutoRender")
                        .HasColumnType("bit");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FlagGroupId")
                        .HasColumnType("int")
                        .HasColumnName("FlagGroupID");

                    b.Property<string>("FlagName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ToolTip")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ValueList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ValueTypeID");

                    b.HasKey("Id");

                    b.HasIndex("FlagGroupId");

                    b.HasIndex("ValueTypeId");

                    b.ToTable("UserFlags");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserFlagValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserFlagId")
                        .HasColumnType("int")
                        .HasColumnName("UserFlagID");

                    b.Property<string>("UserFlagValue1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserFlagValue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFlagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFlagValues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime");

                    b.Property<short>("ActivityTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("ActivityTypeID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MachineId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MachineID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("UserProperties");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserPropertyId")
                        .HasColumnType("int")
                        .HasColumnName("UserPropertyID");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPropertyId");

                    b.ToTable("UserPropertyValues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsersOauthAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastUsedUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OauthProviderId")
                        .HasColumnType("int")
                        .HasColumnName("OAuthProviderID");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProviderUserID");

                    b.Property<string>("ProviderUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserProfilePicPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OauthProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersOAuthAccounts", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsersOauthDatum", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocalAccountActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.ToTable("UsersOAuthData", (string)null);
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Daily")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailSubscriber")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmssubscriber")
                        .HasColumnType("bit")
                        .HasColumnName("IsSMSSubscriber");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Monthly")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("TopicID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Weekends")
                        .HasColumnType("int");

                    b.Property<int?>("Weekly")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ValueTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ValueTypes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Variation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VariationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Warehouse", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("UsersInRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UsersInR__AF2760AD3E1F151E");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersInRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Address", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_AddressTypes");

                    b.HasOne("NatShopB2C.Domain.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Addresses_Cities");

                    b.HasOne("NatShopB2C.Domain.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Addresses_Countries");

                    b.HasOne("NatShopB2C.Domain.Models.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Addresses_States");

                    b.Navigation("AddressType");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.AdminMenu", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Page", "Page")
                        .WithMany("AdminMenus")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_AdminMenus_Pages");

                    b.HasOne("NatShopB2C.Domain.Models.AdminMenu", "ParentMenu")
                        .WithMany("InverseParentMenu")
                        .HasForeignKey("ParentMenuId")
                        .HasConstraintName("FK_AdminMenues_AdminMenues");

                    b.Navigation("Page");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Art", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ArtCategory", "ArtCategory")
                        .WithMany("Arts")
                        .HasForeignKey("ArtCategoryId")
                        .HasConstraintName("FK_Arts_ArtCategories");

                    b.Navigation("ArtCategory");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtCategory", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ArtCategory", "ParentArtCategory")
                        .WithMany("InverseParentArtCategory")
                        .HasForeignKey("ParentArtCategoryId")
                        .HasConstraintName("FK_ArtCategories_ArtCategories");

                    b.Navigation("ParentArtCategory");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtProperty", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Art", "Art")
                        .WithMany("ArtProperties")
                        .HasForeignKey("ArtId")
                        .IsRequired()
                        .HasConstraintName("FK_ArtProperties_Arts");

                    b.Navigation("Art");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.BrandImage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("BrandImages")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrandImages_Brands1");

                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("BrandImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrandImages_Images1");

                    b.Navigation("Brand");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Cart", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Price", "Price")
                        .WithMany("Carts")
                        .HasForeignKey("PriceId")
                        .HasConstraintName("FK_Carts_Prices");

                    b.HasOne("NatShopB2C.Domain.Models.ProductDiscount", "ProductDiscount")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDiscountId")
                        .HasConstraintName("FK_Carts_ProductDiscounts");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("Carts")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_Carts_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("Carts")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Carts_Carts");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Carts_UserDetails");

                    b.Navigation("Price");

                    b.Navigation("ProductDiscount");

                    b.Navigation("ProductVariation");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Category", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Categories_Categories");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryFilter", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("CategoryFilters")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryFilters_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.Filter", "Filter")
                        .WithMany("CategoryFilters")
                        .HasForeignKey("FilterId")
                        .HasConstraintName("FK_CategoryFilters_Filters");

                    b.Navigation("Category");

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryImage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("CategoryImages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryImages_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("CategoryImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryImages_Images");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategorySpecificationGroupsSpecification", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("CategorySpecificationGroupsSpecifications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CategorySpecificaions_CategorySpecificaions");

                    b.HasOne("NatShopB2C.Domain.Models.SpecificationGroup", "SpecificationGroup")
                        .WithMany("CategorySpecificationGroupsSpecifications")
                        .HasForeignKey("SpecificationGroupId")
                        .HasConstraintName("FK_CategorySpecificaions_SpecificationGroups");

                    b.HasOne("NatShopB2C.Domain.Models.Specification", "Specification")
                        .WithMany("CategorySpecificationGroupsSpecifications")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_CategorySpecificaionGroups_Specifications");

                    b.Navigation("Category");

                    b.Navigation("Specification");

                    b.Navigation("SpecificationGroup");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CategoryUsageType", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("CategoryUsageTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CategoryUsageTypes_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.UsageType", "UsageType")
                        .WithMany("CategoryUsageTypes")
                        .HasForeignKey("UsageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CategoryUsageTypes_UsageTypes");

                    b.Navigation("Category");

                    b.Navigation("UsageType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.City", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_Countries");

                    b.HasOne("NatShopB2C.Domain.Models.MetroCity", "Metrocity")
                        .WithMany("Cities")
                        .HasForeignKey("MetrocityId")
                        .HasConstraintName("FK_Cities_MetroCities");

                    b.HasOne("NatShopB2C.Domain.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Cities_States");

                    b.Navigation("Country");

                    b.Navigation("Metrocity");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CmspageContent", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Cmspage", "Cmspage")
                        .WithMany("CmspageContents")
                        .HasForeignKey("CmspageId")
                        .IsRequired()
                        .HasConstraintName("FK_CMSPageContents_CMSPages");

                    b.HasOne("NatShopB2C.Domain.Models.Content", "Content")
                        .WithMany("CmspageContents")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_PageContents_Contents");

                    b.Navigation("Cmspage");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Content", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("Contents")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Contents_Images");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductImage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.CanvasType", "CanvasType")
                        .WithMany("DesignProductImages")
                        .HasForeignKey("CanvasTypeId")
                        .HasConstraintName("FK_DesignProductImages_CanvasTypes");

                    b.HasOne("NatShopB2C.Domain.Models.DesignProduct", "DesignProduct")
                        .WithMany("DesignProductImages")
                        .HasForeignKey("DesignProductId")
                        .IsRequired()
                        .HasConstraintName("FK_DesignProductImages_DesignProducts");

                    b.Navigation("CanvasType");

                    b.Navigation("DesignProduct");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductImageRecepy", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ArtProperty", "ArtProperty")
                        .WithMany("DesignProductImageRecepies")
                        .HasForeignKey("ArtPropertyId")
                        .HasConstraintName("FK_DesignProductImageRecepies_ArtProperties");

                    b.HasOne("NatShopB2C.Domain.Models.DesignProductImage", "DesignProductImage")
                        .WithMany("DesignProductImageRecepies")
                        .HasForeignKey("DesignProductImageId")
                        .HasConstraintName("FK_DesignProductImageRecepies_DesignProductImages");

                    b.HasOne("NatShopB2C.Domain.Models.TextProperty", "TextProperty")
                        .WithMany("DesignProductImageRecepies")
                        .HasForeignKey("TextPropertyId")
                        .HasConstraintName("FK_DesignProductImageRecepies_DesignProductImageRecepies");

                    b.Navigation("ArtProperty");

                    b.Navigation("DesignProductImage");

                    b.Navigation("TextProperty");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductOrder", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.DesignProduct", "DesignProduct")
                        .WithMany("DesignProductOrders")
                        .HasForeignKey("DesignProductId")
                        .HasConstraintName("FK_DesignProductOrders_DesignProductOrders");

                    b.HasOne("NatShopB2C.Domain.Models.TextProperty", "TextPropertyId1Navigation")
                        .WithMany("DesignProductOrderTextPropertyId1Navigations")
                        .HasForeignKey("TextPropertyId1")
                        .HasConstraintName("FK_DesignProductOrders_TextProperties");

                    b.HasOne("NatShopB2C.Domain.Models.TextProperty", "TextPropertyId2Navigation")
                        .WithMany("DesignProductOrderTextPropertyId2Navigations")
                        .HasForeignKey("TextPropertyId2")
                        .HasConstraintName("FK_DesignProductOrders_TextProperties1");

                    b.HasOne("NatShopB2C.Domain.Models.TextProperty", "TextPropertyId3Navigation")
                        .WithMany("DesignProductOrderTextPropertyId3Navigations")
                        .HasForeignKey("TextPropertyId3")
                        .HasConstraintName("FK_DesignProductOrders_TextProperties2");

                    b.HasOne("NatShopB2C.Domain.Models.TextProperty", "TextPropertyId4Navigation")
                        .WithMany("DesignProductOrderTextPropertyId4Navigations")
                        .HasForeignKey("TextPropertyId4")
                        .HasConstraintName("FK_DesignProductOrders_TextProperties3");

                    b.Navigation("DesignProduct");

                    b.Navigation("TextPropertyId1Navigation");

                    b.Navigation("TextPropertyId2Navigation");

                    b.Navigation("TextPropertyId3Navigation");

                    b.Navigation("TextPropertyId4Navigation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Discount", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("Discounts")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Discounts_Images");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountOptioin", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Discount", "Discount")
                        .WithMany("DiscountOptioins")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_DiscountOptioins_Discounts");

                    b.HasOne("NatShopB2C.Domain.Models.DiscountValueType", "DiscountValueType")
                        .WithMany("DiscountOptioins")
                        .HasForeignKey("DiscountValueTypeId")
                        .HasConstraintName("FK_DiscountOptioins_DiscountValueTypes");

                    b.Navigation("Discount");

                    b.Navigation("DiscountValueType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Feedback", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "ActionByNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ActionBy")
                        .HasConstraintName("FK_Feedbacks_UserDetails");

                    b.HasOne("NatShopB2C.Domain.Models.FeedbackAction", "Action")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_Feedbacks_FeedbackActions");

                    b.HasOne("NatShopB2C.Domain.Models.FeedbackInquiryCategory", "FeedbackCategory")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackCategoryId")
                        .HasConstraintName("FK_Feedbacks_FeedbackInquiryCategories");

                    b.Navigation("Action");

                    b.Navigation("ActionByNavigation");

                    b.Navigation("FeedbackCategory");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FlagGroup", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.FlagGroup", "ParentFlagGroup")
                        .WithMany("InverseParentFlagGroup")
                        .HasForeignKey("ParentFlagGroupId")
                        .HasConstraintName("FK_FlagGroups_FlagGroups");

                    b.Navigation("ParentFlagGroup");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FooterSectionLink", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.FooterSection", "FooterSection")
                        .WithMany("FooterSectionLinks")
                        .HasForeignKey("FooterSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_FooterSectionLinks_FooterSections");

                    b.Navigation("FooterSection");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.HelpfulProductReview", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductReview", "ProductReview")
                        .WithMany("HelpfulProductReviews")
                        .HasForeignKey("ProductReviewId")
                        .IsRequired()
                        .HasConstraintName("FK_HelpfulProductReviews_ProductReviews");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("HelpfulProductReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_HelpfulProductReviews_UserDetails");

                    b.Navigation("ProductReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Inquiry", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.FeedbackInquiryCategory", "InquiryCategory")
                        .WithMany("Inquiries")
                        .HasForeignKey("InquiryCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Inquiries_FeedbackInquiryCategories");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "ResponderUser")
                        .WithMany("InquiryResponderUsers")
                        .HasForeignKey("ResponderUserId")
                        .HasConstraintName("FK_Inquiries_UserDetails1");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("InquiryUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Inquiries_UserDetails");

                    b.Navigation("InquiryCategory");

                    b.Navigation("ResponderUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.InquiryMessage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("InquiryMessages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_InquiryMessages_Inquiries");

                    b.HasOne("NatShopB2C.Domain.Models.Inquiry", "Inquiry")
                        .WithMany("InquiryMessages")
                        .HasForeignKey("InquiryId")
                        .HasConstraintName("FK_InquiryMessages_Inquiries1");

                    b.Navigation("Image");

                    b.Navigation("Inquiry");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailAttachment", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Document", "Document")
                        .WithMany("MailAttachments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_MailAttachments_Documents");

                    b.HasOne("NatShopB2C.Domain.Models.Mail", "Mail")
                        .WithMany("MailAttachments")
                        .HasForeignKey("MailId")
                        .IsRequired()
                        .HasConstraintName("FK_MailAttachments_Mails");

                    b.Navigation("Document");

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailQueue", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Mail", "Mail")
                        .WithMany("MailQueues")
                        .HasForeignKey("MailId")
                        .IsRequired()
                        .HasConstraintName("FK_MailQueus_Mails");

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MailResource", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("MailResources")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_MailResources_Images");

                    b.HasOne("NatShopB2C.Domain.Models.Mail", "Mail")
                        .WithMany("MailResources")
                        .HasForeignKey("MailId")
                        .IsRequired()
                        .HasConstraintName("FK_MailResources_Mails");

                    b.Navigation("Image");

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Membership", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Application", "Application")
                        .WithMany("Memberships")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("MembershipApplication");

                    b.HasOne("NatShopB2C.Domain.Models.User", "User")
                        .WithOne("Membership")
                        .HasForeignKey("NatShopB2C.Domain.Models.Membership", "UserId")
                        .IsRequired()
                        .HasConstraintName("MembershipUser");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.NatShopB2CAPI.Models.UserContact", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ContactType", "ContactType")
                        .WithMany("UserContacts")
                        .HasForeignKey("ContactTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserContacts_ContactTypes");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserContacts_UserDetails");

                    b.Navigation("ContactType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Notification", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .HasConstraintName("FK_Notifications_NotificationTypes");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentMethod", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodTypeId")
                        .HasConstraintName("FK_PaymentMethods_PaymentGateways");

                    b.HasOne("NatShopB2C.Domain.Models.PaymentPlugin", "PaymentPlugin")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentPluginId")
                        .HasConstraintName("FK_PaymentMethods_PaymentPlugins");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("PaymentPlugin");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PersonAccount", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Address", "Address1")
                        .WithMany("PersonAccountAddress1s")
                        .HasForeignKey("Address1Id")
                        .HasConstraintName("FK_PersonAccounts_Addresses");

                    b.HasOne("NatShopB2C.Domain.Models.Address", "Address2")
                        .WithMany("PersonAccountAddress2s")
                        .HasForeignKey("Address2Id")
                        .HasConstraintName("FK_PersonAccounts_Addresses1");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("PersonAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PersonAccounts_UserDetails");

                    b.Navigation("Address1");

                    b.Navigation("Address2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Price", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("Prices")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductPrices_Units");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Product", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_Brands");

                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.ProductSet", "ProductSet")
                        .WithMany("Products")
                        .HasForeignKey("ProductSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_ProductSets");

                    b.HasOne("NatShopB2C.Domain.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Sku")
                        .WithMany("ProductSkus")
                        .HasForeignKey("Skuid")
                        .HasConstraintName("FK_Products_Units1");

                    b.HasOne("NatShopB2C.Domain.Models.StockType", "StockType")
                        .WithMany("Products")
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_StockTypes");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Products_Units");

                    b.HasOne("NatShopB2C.Domain.Models.UsageType", "UsageType")
                        .WithMany("Products")
                        .HasForeignKey("UsageTypeId")
                        .HasConstraintName("FK_Products_UsageTypes");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ProductSet");

                    b.Navigation("ProductType");

                    b.Navigation("Sku");

                    b.Navigation("StockType");

                    b.Navigation("Unit");

                    b.Navigation("UsageType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductAssociationProductVariation", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductAssociation", "ProductAssociation")
                        .WithMany("ProductAssociationProductVariations")
                        .HasForeignKey("ProductAssociationId")
                        .HasConstraintName("FK_ProductAssociationProductVariations_ProductAssociations");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductAssociationProductVariations")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductAssociationProductVariations_ProductVariations");

                    b.Navigation("ProductAssociation");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductDiscount", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ProductDiscounts_Brands");

                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ProductDiscounts_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_ProductDiscounts_Discounts");

                    b.HasOne("NatShopB2C.Domain.Models.DiscountOptioin", "DiscountOption")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountOptionId")
                        .HasConstraintName("FK_ProductDiscounts_DiscountOptioins");

                    b.HasOne("NatShopB2C.Domain.Models.DiscountType", "DiscountType")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountTypeId")
                        .HasConstraintName("FK_ProductDiscounts_DiscountTypes");

                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductDiscounts_Products");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductDiscounts_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ProductDiscounts_UserDetails");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("DiscountOption");

                    b.Navigation("DiscountType");

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductReview", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductReviews_Products");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductReviews_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("ProductReviewUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ProductReviews_UserDetails");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "VarifiedByNavigation")
                        .WithMany("ProductReviewVarifiedByNavigations")
                        .HasForeignKey("VarifiedBy")
                        .HasConstraintName("FK_ProductReviews_UserDetails1");

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");

                    b.Navigation("User");

                    b.Navigation("VarifiedByNavigation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSetProduct", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductSetProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProductSetProducts_Products");

                    b.HasOne("NatShopB2C.Domain.Models.ProductSet", "ProductSet")
                        .WithMany("ProductSetProducts")
                        .HasForeignKey("ProductSetId")
                        .HasConstraintName("FK_ProductSetProducts_ProdutSets");

                    b.Navigation("Product");

                    b.Navigation("ProductSet");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductShipment", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductVariationPrice", "ProductVariatioinPrice")
                        .WithMany("ProductShipments")
                        .HasForeignKey("ProductVariatioinPriceId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductShipments_ProductVariationPrices");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("ProductShipments")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_ProductShipments_Units");

                    b.Navigation("ProductVariatioinPrice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSpecification", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductSpecifications_Products");

                    b.HasOne("NatShopB2C.Domain.Models.SpecificationGroup", "SpecificationGroup")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("SpecificationGroupId")
                        .HasConstraintName("FK_ProductSpecifications_SpecificationGroups");

                    b.HasOne("NatShopB2C.Domain.Models.Specification", "Specification")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductSpecifications_Specifications");

                    b.Navigation("Product");

                    b.Navigation("Specification");

                    b.Navigation("SpecificationGroup");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductStatitic", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "IdNavigation")
                        .WithOne("ProductStatitic")
                        .HasForeignKey("NatShopB2C.Domain.Models.ProductStatitic", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_ProductStatitics_ProductVariations");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductStock", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductStocks_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.TransactionType", "TransactionType")
                        .WithMany("ProductStocks")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_ProductStocks_TransactionTypes");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("ProductStocks")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_ProductStocks_Units");

                    b.Navigation("ProductVariation");

                    b.Navigation("TransactionType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductTax", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductTaxes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductTaxs_Products");

                    b.HasOne("NatShopB2C.Domain.Models.Tax", "Tax")
                        .WithMany("ProductTaxes")
                        .HasForeignKey("TaxId")
                        .HasConstraintName("FK_ProductTaxs_Taxs");

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariation", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductAssociation", "ProductAssociation")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductAssociationId")
                        .HasConstraintName("FK_ProductVariations_ProductAssociations");

                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariations_Products");

                    b.Navigation("Product");

                    b.Navigation("ProductAssociation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationImage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Image", "Image")
                        .WithMany("ProductVariationImages")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationImages_Images");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationImages")
                        .HasForeignKey("ProductVariationId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationImages_ProductVariations1");

                    b.Navigation("Image");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationPrice", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Price", "Price")
                        .WithMany("ProductVariationPrices")
                        .HasForeignKey("PriceId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationPrices_ProductPrices");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationPrices")
                        .HasForeignKey("ProductVariationId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationPrices_ProductVariations");

                    b.Navigation("Price");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationValue", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("ProductVariationValues")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationValues_Products");

                    b.HasOne("NatShopB2C.Domain.Models.Variation", "Variation")
                        .WithMany("ProductVariationValues")
                        .HasForeignKey("VariationId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariationValues_Variations");

                    b.Navigation("Product");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Profile", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("NatShopB2C.Domain.Models.Profile", "UserId")
                        .IsRequired()
                        .HasConstraintName("UserProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Purchase", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Currency", "Currency")
                        .WithMany("Purchases")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Purchases_Currencies");

                    b.HasOne("NatShopB2C.Domain.Models.PersonAccount", "PersonAccount")
                        .WithMany("Purchases")
                        .HasForeignKey("PersonAccountId")
                        .HasConstraintName("FK_Purchases_PersonAccounts");

                    b.Navigation("Currency");

                    b.Navigation("PersonAccount");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PurchaseDetail", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Price", "Price")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PriceId")
                        .HasConstraintName("FK_PurchaseDetails_Prices");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_PurchaseDetails_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchaseDetails_Purchases");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_PurchaseDetails_Units");

                    b.Navigation("Price");

                    b.Navigation("ProductVariation");

                    b.Navigation("Purchase");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany()
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_PurchaseOrderDetails_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_PurchaseOrderDetails_PurchaseOrders");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_PurchaseOrderDetails_Units");

                    b.Navigation("ProductVariation");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Role", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Application", "Application")
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("RoleApplication");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.RolePage", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Page", "Page")
                        .WithMany("RolePages")
                        .HasForeignKey("PageId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePages_Pages");

                    b.HasOne("NatShopB2C.Domain.Models.Role", "Role")
                        .WithMany("RolePages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePages_Roles");

                    b.Navigation("Page");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Sale", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Address", "BillingAddress")
                        .WithMany("SaleBillingAddresses")
                        .HasForeignKey("BillingAddressId")
                        .HasConstraintName("FK_Sales_Addresses1");

                    b.HasOne("NatShopB2C.Domain.Models.Currency", "Currency")
                        .WithMany("Sales")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Sales_Currencies");

                    b.HasOne("NatShopB2C.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Sales_PaymentMethods");

                    b.HasOne("NatShopB2C.Domain.Models.PersonAccount", "PersonAccount")
                        .WithMany("Sales")
                        .HasForeignKey("PersonAccountId")
                        .HasConstraintName("FK_Sales_PersonAccounts");

                    b.HasOne("NatShopB2C.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("Sales")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("FK_Sales_SalesOrders");

                    b.HasOne("NatShopB2C.Domain.Models.SalesStatus", "SalesStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SalesStatusId")
                        .HasConstraintName("FK_Sales_SalesStatus");

                    b.HasOne("NatShopB2C.Domain.Models.SalesType", "SalesType")
                        .WithMany("Sales")
                        .HasForeignKey("SalesTypeId")
                        .HasConstraintName("FK_Sales_SalesTypes");

                    b.HasOne("NatShopB2C.Domain.Models.Address", "ShippingAddress")
                        .WithMany("SaleShippingAddresses")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("FK_Sales_Addresses");

                    b.Navigation("BillingAddress");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PersonAccount");

                    b.Navigation("SalesOrder");

                    b.Navigation("SalesStatus");

                    b.Navigation("SalesType");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesDetail", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Price", "PriceNavigation")
                        .WithMany("SalesDetails")
                        .HasForeignKey("PriceId")
                        .HasConstraintName("FK_SalesDetails_Prices");

                    b.HasOne("NatShopB2C.Domain.Models.ProductVariation", "ProductVariation")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_SalesDetails_ProductVariations");

                    b.HasOne("NatShopB2C.Domain.Models.Sale", "Sales")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesId")
                        .HasConstraintName("FK_SalesDetails_Sales");

                    b.Navigation("PriceNavigation");

                    b.Navigation("ProductVariation");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesHistoryTransaction", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.SalesStatus", "SalesStaus")
                        .WithMany("SalesHistoryTransactions")
                        .HasForeignKey("SalesStausId")
                        .HasConstraintName("FK_SalesHistoryTransactions_SalesStatus");

                    b.Navigation("SalesStaus");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesOrder", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Currency", "Currency")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_SalesOrders_Currencies");

                    b.HasOne("NatShopB2C.Domain.Models.PersonAccount", "PersonAccount")
                        .WithMany("SalesOrders")
                        .HasForeignKey("PersonAccountId")
                        .HasConstraintName("FK_SalesOrders_PersonAccounts");

                    b.Navigation("Currency");

                    b.Navigation("PersonAccount");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Seocontent", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("Seocontents")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_SEOContents_Brands");

                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("Seocontents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SEOContents_Category");

                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("Seocontents")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SEOContents_Products");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgent", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Address", "Address")
                        .WithMany("ShipmentAgents")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_ShipmentAgents_Addresses");

                    b.HasOne("NatShopB2C.Domain.Models.ShipmentAgentType", "ShipAgentType")
                        .WithMany("ShipmentAgents")
                        .HasForeignKey("ShipAgentTypeId")
                        .HasConstraintName("FK_ShipmentAgents_ShipmentAgentTypes");

                    b.Navigation("Address");

                    b.Navigation("ShipAgentType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentCourierServiceProvider", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ShipmentAgent", "CourierServiceProvider")
                        .WithMany("ShipmentAgentCourierServiceProviderCourierServiceProviders")
                        .HasForeignKey("CourierServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentAgentCourierServiceProviders_ShipmentAgentCourierServiceProviders");

                    b.HasOne("NatShopB2C.Domain.Models.ShipmentAgent", "ShipmentAgent")
                        .WithMany("ShipmentAgentCourierServiceProviderShipmentAgents")
                        .HasForeignKey("ShipmentAgentId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentAgentCourierServiceProviders_ShipmentAgents");

                    b.Navigation("CourierServiceProvider");

                    b.Navigation("ShipmentAgent");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentRegion", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.City", "City")
                        .WithMany("ShipmentAgentRegions")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ShipmentAgentRegions_Cities");

                    b.HasOne("NatShopB2C.Domain.Models.Country", "Country")
                        .WithMany("ShipmentAgentRegions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_ShipmentAgentRegions_Countries");

                    b.HasOne("NatShopB2C.Domain.Models.ShipmentAgent", "ShipmentAgent")
                        .WithMany("ShipmentAgentRegions")
                        .HasForeignKey("ShipmentAgentId")
                        .HasConstraintName("FK_ShipmentAgentRegions_ShipmentAgentRegions");

                    b.HasOne("NatShopB2C.Domain.Models.State", "State")
                        .WithMany("ShipmentAgentRegions")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_ShipmentAgentRegions_States");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("ShipmentAgent");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentRegionRate", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ShipmentAgentRegion", "ShipmentAgentRegion")
                        .WithMany("ShipmentAgentRegionRates")
                        .HasForeignKey("ShipmentAgentRegionId")
                        .HasConstraintName("FK_ShipmentRates_ShipmentRates2");

                    b.Navigation("ShipmentAgentRegion");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentOffer", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.City", "City")
                        .WithMany("ShipmentOffers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ShipmentOffers_Cities");

                    b.HasOne("NatShopB2C.Domain.Models.Country", "Country")
                        .WithMany("ShipmentOffers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_ShipmentOffers_Countries");

                    b.HasOne("NatShopB2C.Domain.Models.MetroCity", "Metrocity")
                        .WithMany("ShipmentOffers")
                        .HasForeignKey("MetrocityId")
                        .HasConstraintName("FK_ShipmentOffers_MetroCities");

                    b.HasOne("NatShopB2C.Domain.Models.State", "State")
                        .WithMany("ShipmentOffers")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_ShipmentOffers_States");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Metrocity");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentOfferCondition", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ShipmentOffer", "ShipmentOffer")
                        .WithMany("ShipmentOfferConditions")
                        .HasForeignKey("ShipmentOfferId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentOfferConditions_ShipmentOffers");

                    b.HasOne("NatShopB2C.Domain.Models.Unit", "Unit")
                        .WithMany("ShipmentOfferConditions")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_ShipmentOfferConditions_Units");

                    b.Navigation("ShipmentOffer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Smsqueue", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Sm", "Sms")
                        .WithMany("Smsqueues")
                        .HasForeignKey("Smsid")
                        .HasConstraintName("FK_SMSQueues_SMSQueues");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("Smsqueues")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SMSQueues_UserDetails");

                    b.Navigation("Sms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Smstopic", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Sm", "Sms")
                        .WithMany("Smstopics")
                        .HasForeignKey("Smsid")
                        .IsRequired()
                        .HasConstraintName("FK_SMSTopics_SMS");

                    b.HasOne("NatShopB2C.Domain.Models.Topic", "Topic")
                        .WithMany("Smstopics")
                        .HasForeignKey("TopicId")
                        .IsRequired()
                        .HasConstraintName("FK_SMSTopics_Topics");

                    b.Navigation("Sms");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SpecificatonGroupSpecification", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.SpecificationGroup", "SpecificationGroup")
                        .WithMany("SpecificatonGroupSpecifications")
                        .HasForeignKey("SpecificationGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SpecificatonGroupSpecifications_SpecificatonGroupSpecifications");

                    b.HasOne("NatShopB2C.Domain.Models.Specification", "Specification")
                        .WithMany("SpecificatonGroupSpecifications")
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_SpecificatonGroupSpecifications_Specifications");

                    b.Navigation("Specification");

                    b.Navigation("SpecificationGroup");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.State", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_States_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SystemFlag", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.FlagGroup", "FlagGroup")
                        .WithMany("SystemFlags")
                        .HasForeignKey("FlagGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SystemFlags_FlagGroups");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "ModifiedByUser")
                        .WithMany("SystemFlags")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_SystemFlags_UserDetails");

                    b.HasOne("NatShopB2C.Domain.Models.ValueType", "ValueType")
                        .WithMany("SystemFlags")
                        .HasForeignKey("ValueTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SystemFlags_ValueTypes");

                    b.Navigation("FlagGroup");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Token", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tokens_UserDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Topic", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Topic", "ParentTopic")
                        .WithMany("InverseParentTopic")
                        .HasForeignKey("ParentTopicId")
                        .HasConstraintName("FK_Topics_Topics1");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TopicMail", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("TopicMails")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_TopicMails_Brands");

                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("TopicMails")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TopicMails_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.Mail", "Mail")
                        .WithMany("TopicMails")
                        .HasForeignKey("MailId")
                        .IsRequired()
                        .HasConstraintName("FK_TopicMails_Mails");

                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("TopicMails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_TopicMails_Products");

                    b.HasOne("NatShopB2C.Domain.Models.Topic", "Topic")
                        .WithMany("TopicMails")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_TopicMails_Topics");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Mail");

                    b.Navigation("Product");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.User", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Application", "Application")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("UserApplication");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserAddress", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_UserAddresses_UserAddresses");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAddresses_UserDetails");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserDetail", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ProofType", "ProofType")
                        .WithMany("UserDetails")
                        .HasForeignKey("ProofTypeId")
                        .HasConstraintName("FK_UserDetails_ProofTypes");

                    b.HasOne("NatShopB2C.Domain.Models.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("NatShopB2C.Domain.Models.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserDetails_Users");

                    b.HasOne("NatShopB2C.Domain.Models.UserType", "UserType")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_UserDetails_UserTypes");

                    b.Navigation("ProofType");

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserFlag", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.FlagGroup", "FlagGroup")
                        .WithMany("UserFlags")
                        .HasForeignKey("FlagGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlags_FlagGroups");

                    b.HasOne("NatShopB2C.Domain.Models.ValueType", "ValueType")
                        .WithMany("UserFlags")
                        .HasForeignKey("ValueTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlags_ValueTypes");

                    b.Navigation("FlagGroup");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserFlagValue", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.UserFlag", "UserFlag")
                        .WithMany("UserFlagValues")
                        .HasForeignKey("UserFlagId")
                        .HasConstraintName("FK_UserFlagValues_UserFlagValues");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserFlagValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserFlagValues_UserDetails");

                    b.Navigation("User");

                    b.Navigation("UserFlag");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserLog", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.ActivityType", "ActivityType")
                        .WithMany("UserLogs")
                        .HasForeignKey("ActivityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogs_ActivityTypes");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogs_UserDetails");

                    b.Navigation("ActivityType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserPropertyValue", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserPropertyValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserPropertyValues_Users");

                    b.HasOne("NatShopB2C.Domain.Models.UserProperty", "UserProperty")
                        .WithMany("UserPropertyValues")
                        .HasForeignKey("UserPropertyId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPropertyValues_UserProperties");

                    b.Navigation("User");

                    b.Navigation("UserProperty");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsersOauthAccount", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.OauthProvider", "OauthProvider")
                        .WithMany("UsersOauthAccounts")
                        .HasForeignKey("OauthProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersOAuthAccounts_OAuthProviders");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UsersOauthAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersOAuthAccounts_UserDetails");

                    b.Navigation("OauthProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsersOauthDatum", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithOne("UsersOauthDatum")
                        .HasForeignKey("NatShopB2C.Domain.Models.UsersOauthDatum", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersOAuthData_UserDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserSubscription", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Brand", "Brand")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_UserSubscriptions_Brands");

                    b.HasOne("NatShopB2C.Domain.Models.Category", "Category")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_UserSubscriptions_Categories");

                    b.HasOne("NatShopB2C.Domain.Models.Product", "Product")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_UserSubscriptions_Products");

                    b.HasOne("NatShopB2C.Domain.Models.Topic", "Topic")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_UserSubscriptions_Topics");

                    b.HasOne("NatShopB2C.Domain.Models.UserDetail", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserSubscriptions_UserDetails");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersInRole", b =>
                {
                    b.HasOne("NatShopB2C.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("UsersInRoleRole");

                    b.HasOne("NatShopB2C.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UsersInRoleUser");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ActivityType", b =>
                {
                    b.Navigation("UserLogs");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Address", b =>
                {
                    b.Navigation("PersonAccountAddress1s");

                    b.Navigation("PersonAccountAddress2s");

                    b.Navigation("SaleBillingAddresses");

                    b.Navigation("SaleShippingAddresses");

                    b.Navigation("ShipmentAgents");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.AdminMenu", b =>
                {
                    b.Navigation("InverseParentMenu");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Application", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Art", b =>
                {
                    b.Navigation("ArtProperties");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtCategory", b =>
                {
                    b.Navigation("Arts");

                    b.Navigation("InverseParentArtCategory");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ArtProperty", b =>
                {
                    b.Navigation("DesignProductImageRecepies");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Brand", b =>
                {
                    b.Navigation("BrandImages");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("Products");

                    b.Navigation("Seocontents");

                    b.Navigation("TopicMails");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.CanvasType", b =>
                {
                    b.Navigation("DesignProductImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Category", b =>
                {
                    b.Navigation("CategoryFilters");

                    b.Navigation("CategoryImages");

                    b.Navigation("CategorySpecificationGroupsSpecifications");

                    b.Navigation("CategoryUsageTypes");

                    b.Navigation("InverseParentCategory");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("Products");

                    b.Navigation("Seocontents");

                    b.Navigation("TopicMails");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ShipmentAgentRegions");

                    b.Navigation("ShipmentOffers");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Cmspage", b =>
                {
                    b.Navigation("CmspageContents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ContactType", b =>
                {
                    b.Navigation("UserContacts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Content", b =>
                {
                    b.Navigation("CmspageContents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");

                    b.Navigation("ShipmentAgentRegions");

                    b.Navigation("ShipmentOffers");

                    b.Navigation("States");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Currency", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProduct", b =>
                {
                    b.Navigation("DesignProductImages");

                    b.Navigation("DesignProductOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DesignProductImage", b =>
                {
                    b.Navigation("DesignProductImageRecepies");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Discount", b =>
                {
                    b.Navigation("DiscountOptioins");

                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountOptioin", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountType", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.DiscountValueType", b =>
                {
                    b.Navigation("DiscountOptioins");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Document", b =>
                {
                    b.Navigation("MailAttachments");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FeedbackAction", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FeedbackInquiryCategory", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Filter", b =>
                {
                    b.Navigation("CategoryFilters");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FlagGroup", b =>
                {
                    b.Navigation("InverseParentFlagGroup");

                    b.Navigation("SystemFlags");

                    b.Navigation("UserFlags");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.FooterSection", b =>
                {
                    b.Navigation("FooterSectionLinks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Image", b =>
                {
                    b.Navigation("BrandImages");

                    b.Navigation("CategoryImages");

                    b.Navigation("Contents");

                    b.Navigation("Discounts");

                    b.Navigation("InquiryMessages");

                    b.Navigation("MailResources");

                    b.Navigation("ProductVariationImages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Inquiry", b =>
                {
                    b.Navigation("InquiryMessages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Mail", b =>
                {
                    b.Navigation("MailAttachments");

                    b.Navigation("MailQueues");

                    b.Navigation("MailResources");

                    b.Navigation("TopicMails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.MetroCity", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("ShipmentOffers");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.OauthProvider", b =>
                {
                    b.Navigation("UsersOauthAccounts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Page", b =>
                {
                    b.Navigation("AdminMenus");

                    b.Navigation("RolePages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentMethodType", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PaymentPlugin", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.PersonAccount", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Price", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductVariationPrices");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSetProducts");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("ProductTaxes");

                    b.Navigation("ProductVariationValues");

                    b.Navigation("ProductVariations");

                    b.Navigation("Seocontents");

                    b.Navigation("TopicMails");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductAssociation", b =>
                {
                    b.Navigation("ProductAssociationProductVariations");

                    b.Navigation("ProductVariations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductDiscount", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductReview", b =>
                {
                    b.Navigation("HelpfulProductReviews");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductSet", b =>
                {
                    b.Navigation("ProductSetProducts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariation", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductAssociationProductVariations");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductStatitic");

                    b.Navigation("ProductStocks");

                    b.Navigation("ProductVariationImages");

                    b.Navigation("ProductVariationPrices");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProductVariationPrice", b =>
                {
                    b.Navigation("ProductShipments");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ProofType", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Role", b =>
                {
                    b.Navigation("RolePages");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Sale", b =>
                {
                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesOrder", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesStatus", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("SalesHistoryTransactions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SalesType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgent", b =>
                {
                    b.Navigation("ShipmentAgentCourierServiceProviderCourierServiceProviders");

                    b.Navigation("ShipmentAgentCourierServiceProviderShipmentAgents");

                    b.Navigation("ShipmentAgentRegions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentRegion", b =>
                {
                    b.Navigation("ShipmentAgentRegionRates");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentAgentType", b =>
                {
                    b.Navigation("ShipmentAgents");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ShipmentOffer", b =>
                {
                    b.Navigation("ShipmentOfferConditions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Sm", b =>
                {
                    b.Navigation("Smsqueues");

                    b.Navigation("Smstopics");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Specification", b =>
                {
                    b.Navigation("CategorySpecificationGroupsSpecifications");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("SpecificatonGroupSpecifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.SpecificationGroup", b =>
                {
                    b.Navigation("CategorySpecificationGroupsSpecifications");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("SpecificatonGroupSpecifications");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.State", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");

                    b.Navigation("ShipmentAgentRegions");

                    b.Navigation("ShipmentOffers");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.StockType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Tax", b =>
                {
                    b.Navigation("ProductTaxes");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TextProperty", b =>
                {
                    b.Navigation("DesignProductImageRecepies");

                    b.Navigation("DesignProductOrderTextPropertyId1Navigations");

                    b.Navigation("DesignProductOrderTextPropertyId2Navigations");

                    b.Navigation("DesignProductOrderTextPropertyId3Navigations");

                    b.Navigation("DesignProductOrderTextPropertyId4Navigations");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Topic", b =>
                {
                    b.Navigation("InverseParentTopic");

                    b.Navigation("Smstopics");

                    b.Navigation("TopicMails");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.TransactionType", b =>
                {
                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Unit", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Prices");

                    b.Navigation("ProductShipments");

                    b.Navigation("ProductSkus");

                    b.Navigation("ProductStocks");

                    b.Navigation("ProductUnits");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("ShipmentOfferConditions");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UsageType", b =>
                {
                    b.Navigation("CategoryUsageTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.User", b =>
                {
                    b.Navigation("Membership");

                    b.Navigation("Profile");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("HelpfulProductReviews");

                    b.Navigation("InquiryResponderUsers");

                    b.Navigation("InquiryUsers");

                    b.Navigation("PersonAccounts");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductReviewUsers");

                    b.Navigation("ProductReviewVarifiedByNavigations");

                    b.Navigation("Smsqueues");

                    b.Navigation("SystemFlags");

                    b.Navigation("Tokens");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserContacts");

                    b.Navigation("UserFlagValues");

                    b.Navigation("UserLogs");

                    b.Navigation("UserPropertyValues");

                    b.Navigation("UserSubscriptions");

                    b.Navigation("UsersOauthAccounts");

                    b.Navigation("UsersOauthDatum");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserFlag", b =>
                {
                    b.Navigation("UserFlagValues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserProperty", b =>
                {
                    b.Navigation("UserPropertyValues");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.UserType", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.ValueType", b =>
                {
                    b.Navigation("SystemFlags");

                    b.Navigation("UserFlags");
                });

            modelBuilder.Entity("NatShopB2C.Domain.Models.Variation", b =>
                {
                    b.Navigation("ProductVariationValues");
                });
#pragma warning restore 612, 618
        }
    }
}
